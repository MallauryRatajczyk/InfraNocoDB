global:
  scrape_interval: 15s  # Intervalle pour scrapper les données

# Configuration d'Alertmanager pour la gestion des alertes
alerting:   #Indique à Prometheus où envoyer les alertes (ici, vers Alertmanager qui tourne sur alertmanager:9093 dans Docker)
  alertmanagers:
    - static_configs:
        - targets:
            - 'alertmanager:9093'  # Assure-toi que Alertmanager tourne sur ce port et est dans le même réseau Docker

# Fichiers contenant les règles d'alerte
rule_files:            # Définit le fichier où sont stockées les règles d’alerte (alert_rules.yml)
  - "alert_rules.yml"  # Ce fichier contiendra les règles d'alerte que Prometheus doit surveiller

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['prometheus:9090']  # Cible Prometheus lui-même

  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']  # Cible Grafana (sur le même réseau)

  - job_name: "nocodb"
    metrics_path: "/metrics"  # Remplace par le bon endpoint si nécessaire
    static_configs:
      - targets: ["{{ ansible_nocodb_ip }}:9100"]

  - job_name: "postgres-exporter"   #Cela permettra à Prometheus de collecter les métriques depuis Postgres Exporter.
    metrics_path: "/metrics"
    static_configs:
      - targets: ["postgres-exporter:9187"]